<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Python Script" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="420" y="88"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALTextToSpeech')
        self.tts.setLanguage('Czech')
        try:
            self.speech = ALProxy("ALSpeechRecognition")
            self.speech.setLanguage('Czech')
        except:
            self.logger.info('Running on virtual robot')
            self.speech = None

        #self.tabletService = self._getTabletService()

        #Include words you want Pepper to know into this list.
        #Without diacritics so far
        self.words = ['univerzita', 'rododendron', 'koriandr']
        self.alphabet = {
            ######################
            'a'             : 'a',
            'á'             : 'a',
            'áčko'          : 'a',
            ######################
            'b'             : 'b',
            'bé'            : 'b',
            'béčko'         : 'b',
            ######################
            'c'             : 'c',
            'cé'            : 'c',
            'céčko'         : 'c',
            ######################
            'd'             : 'd',
            'dé'            : 'd',
            'déčko'         : 'd',
            ######################
            'e'             : 'e',
            'é'             : 'e',
            'éčko'          : 'e',
            ######################
            'f'             : 'f',
            'ef'            : 'f',
            'efko'          : 'f',
            ######################
            'g'             : 'g',
            'gé'            : 'g',
            'géčko'         : 'g',
            ######################
            'h'             : 'h',
            'há'            : 'h',
            'háčko'         : 'h',
            ######################
            'i'             : 'i',
            'í'             : 'i',
            'íčko'          : 'i',
            ######################
            'j'             : 'j',
            'jé'            : 'j',
            'jéčko'         : 'j',
            ######################
            'k'             : 'k',
            'ká'            : 'k',
            'káčko'         : 'k',
            ######################
            'l'             : 'l',
            'el'            : 'l',
            'elko'          : 'l',
            ######################
            'm'             : 'm',
            'em'            : 'm',
            'emko'          : 'm',
            ######################
            'n'             : 'n',
            'en'            : 'n',
            'enko'          : 'n',
            ######################
            'o'             : 'o',
            'ó'             : 'o',
            'óčko'          : 'o',
            ######################
            'p'             : 'p',
            'pé'            : 'p',
            'péčko'         : 'p',
            ######################
            'q'             : 'q',
            'kvé'           : 'q',
            'kvéčko'        : 'q',
            ######################
            'r'             : 'r',
            'er'            : 'r',
            'erko'          : 'r',
            ######################
            's'             : 's',
            'es'            : 's',
            'esko'          : 's',
            ######################
            't'             : 't',
            'té'            : 't',
            'téčko'         : 't',
            ######################
            'u'             : 'u',
            'ů'             : 'u',
            'ú'             : 'u',
            'ůčko'          : 'u',
            'účko'          : 'u',
            ######################
            'v'             : 'v',
            'vé'            : 'v',
            'véčko'         : 'v',
            ######################
            'dvojité v'     : 'w',
            'dvojité vé'    : 'w',
            'dvojité véčko' : 'w',
            ######################
            'x'             : 'x',
            'iks'           : 'x',
            'iksko'         : 'x',
            'xko'           : 'x',
            ######################
            'y'             : 'y',
            'ypsilon'       : 'y',
            ######################
            'z'             : 'z',
            'zet'           : 'z',
            'zetko'         : 'z',
        }

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def get_answer(self, reactions):
        if self.speech is None:
            return (random.choice(reactions.keys()))
        else:
            self.speech.setVocabulary(reactions.keys(), False)
            self.speech.subscribe("Test_ASR")
            self.logger.info('Speech recognition engine started')
            time.sleep(20)
            self.speech.unsubscribe("Test_ASR")

    #Returns a list of indexes on which 'letter' is found
    def wordGetLettersIndexes(self, guessWord, letter):
        idxs = []
        for i in range(len(guessWord)):
            if guessWord[i] == letter:
                idxs.append(i)
        return idxs

    def setValuesToListByIndexes(self, destList, indexes, value):
        for index in indexes:
            destList[index] = value
        return destList

    def startGallowsGame(self):
        self.tts.say('Znáš pravidla?')
        reactions = {
            'ano': 'Dobře',
            'jo' : 'Dobře',
            'ne' : """Tak já ti to vysvětlím. Já si budu myslet slovo, ukážu ti na mojem tabletu první a poslední písmeno
                   a počet písmen mezi. Tvojím úkolem je uhodnout, co za slovo si myslím. Říkej písmenka a já podle toho
                   budu upravovat výstup na tabletu. Můžeš taky v průběhu zkusit uhodnout celé slovo. Pokud ale neuspěješ,
                   bude tě to stát jeden pokus. Celkově máš 10 pokusů. Hodně štěstí!"""
        }
        guessWord                = self.words[random.randint(0, len(self.words)-1)] # Choose random word to guess
        userProgress             = [False for i in range(len(guessWord))]           # User progress tracker - True if letter guessed
        userProgress[0]          = True              # First letter is always displayed
        userProgress[-1]         = True              # Last letter is always displayed
        self.alphabet[guessWord] = guessWord         # Append guessed word to alphabet, so that user can guess the whole word
        emergencyExit            = ['Karle konec']   # To manually exit while loop
        failNumber               = 0                 # Number of fails troughout the game

        self.tts.say('Můžeme začít. Myslím si slovo')
        self.logger.info('Guessing word : {}'.format(guessWord))
        self.wordGuessed = False

        # Answers to letter in guessWord
        # Feel free to add your responses
        self.letterInWord     = ['Výborně, uhodl jsi písmenko', 'Super, jde ti to. Písmenko tam je']
        self.letterNotInWord  = ['Bohužel, písmenko ve slově není.', 'S takovou budeš brzo viset. Písmenko ve slově není.', 'Promiň, ale musím ti přidat jeden neúspěšný pokus']
        self.guessedWholeWord = ['No to není možné. Uhodl jsi celé slovo. Gratuluji, vyhrál jsi']

        # TODO self.tablet.showBeginning()
        while not self.wordGuessed:

            #If failed too many times, stop the game
            if failNumber > 10:
                self.tts.say('Už jsi se desetkrát netrefil. Konec hry')
                break

            letter = self.alphabet.get(self.get_answer(self.alphabet))
            if letter == emergencyExit:
                self.logger.info('Stopping manually')
                break
            if letter == guessWord:
                self.tts.say(self.guessedWholeWord[random.randint(0, len(self.guessedWholeWord) -1)])
                self.wordGuessed = True
                break

            if letter in guessWord:
                indexes      = self.wordGetLettersIndexes(guessWord, letter)
                userProgress = self.setValuesToListByIndexes(userProgress, indexes, True)

                self.tts.say(self.letterInWord[random.randint(0, len(self.letterInWord)-1)])
                self.logger.info('Word = {}, userProgress = {}'.format(guessWord, userProgress))
                if userProgress == [True for i in range(len(guessWord))]:
                    self.WordGuessed = True
                    self.tts.say(self.guessedWholeWord[random.randint(0, len(self.guessedWholeWord) -1)])
            else:
                self.tts.say(self.letterNotInWord[random.randint(0, len(self.letterNotInWord)-1)])
                failNumber += 1

    def onInput_onStart(self):
        self.tts.say("Ahoj, chceš hrát šibenici?")
        reactions = {
            'ano':  'Tak jo. Budu si myslet slovo.',
            'jo': 'Tak jo. Budu si myslet slovo',
            'ne': 'Když nechceš hrát, tak proč mě zapínáš?',
        }
        answer = self.get_answer(reactions)
        react = reactions.get(answer)
        self.logger.info('answer={}, react={}'.format(answer, react))
        self.tts.say(react)

        if answer in ['ano', 'jo']:
            self.logger.info('Positive answer found, starting the game')
            self.startGallowsGame()

        self.onStopped()


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>